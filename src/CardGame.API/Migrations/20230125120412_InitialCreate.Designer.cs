// <auto-generated />
using System;
using CardGame.API.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CardGame.API.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20230125120412_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CardGame.API.Models.Database.CardGame", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GameId"));

                    b.Property<string>("DeckId")
                        .HasColumnType("text");

                    b.Property<bool>("HasWinner")
                        .HasColumnType("boolean");

                    b.Property<int>("RoundsPlayed")
                        .HasColumnType("integer");

                    b.HasKey("GameId");

                    b.ToTable("CardGames");
                });

            modelBuilder.Entity("CardGame.API.Models.Database.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("CardGame.API.Models.Database.PlayerRoundInfo", b =>
                {
                    b.Property<int>("RoundInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoundInfoId"));

                    b.Property<int?>("CardGameGameId")
                        .HasColumnType("integer");

                    b.Property<string>("CardValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerId1")
                        .HasColumnType("integer");

                    b.HasKey("RoundInfoId");

                    b.HasIndex("CardGameGameId");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerId1");

                    b.ToTable("RoundInfo");
                });

            modelBuilder.Entity("CardGamePlayer", b =>
                {
                    b.Property<int>("CardGamesGameId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayersPlayerId")
                        .HasColumnType("integer");

                    b.HasKey("CardGamesGameId", "PlayersPlayerId");

                    b.HasIndex("PlayersPlayerId");

                    b.ToTable("CardGamePlayer");
                });

            modelBuilder.Entity("CardGame.API.Models.Database.PlayerRoundInfo", b =>
                {
                    b.HasOne("CardGame.API.Models.Database.CardGame", null)
                        .WithMany("PlayerRoundInfos")
                        .HasForeignKey("CardGameGameId");

                    b.HasOne("CardGame.API.Models.Database.CardGame", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.HasOne("CardGame.API.Models.Database.Player", null)
                        .WithMany("PlayerRoundInfos")
                        .HasForeignKey("PlayerId");

                    b.HasOne("CardGame.API.Models.Database.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId1");

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("CardGamePlayer", b =>
                {
                    b.HasOne("CardGame.API.Models.Database.CardGame", null)
                        .WithMany()
                        .HasForeignKey("CardGamesGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardGame.API.Models.Database.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CardGame.API.Models.Database.CardGame", b =>
                {
                    b.Navigation("PlayerRoundInfos");
                });

            modelBuilder.Entity("CardGame.API.Models.Database.Player", b =>
                {
                    b.Navigation("PlayerRoundInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
